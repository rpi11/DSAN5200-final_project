[
  {
    "objectID": "viz_Zenan/viz.html",
    "href": "viz_Zenan/viz.html",
    "title": "Viz 5",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport warnings\nwarnings.filterwarnings('ignore')\nwith open(\"../data/data.csv\", \"r\") as f:\n    df = pd.read_csv(f)\ndf.head()\n\n\n\n\n\n\n\n\nLevel\nCategory\nVariable\nCounty\nDate\nGEOID\nState FIPS\nState\nValue\nDenominator\nDenominator Description\nRow-ID\nLatitude\nLongitude\nLocation\nYear\n\n\n\n\n0\nCounty\nAirports\nTotal Airports\nGrant County, Wisconsin\n01/01/2020 12:00:00 AM\n55043\n55\nWisconsin\n9.0\n9.0\nTotal Airports\nairports-2020-55043\n42.867479\n-90.706205\nPOINT (-90.706205 42.867479)\n2020\n\n\n1\nCounty\nAirports\nTotal Airports\nTaylor County, Florida\n01/01/2020 12:00:00 AM\n12123\n12\nFlorida\n7.0\n7.0\nTotal Airports\nairports-2020-12123\n30.047015\n-83.603520\nPOINT (-83.60352 30.047015)\n2020\n\n\n2\nCounty\nAirports\nTotal Airports\nStephens County, Texas\n01/01/2020 12:00:00 AM\n48429\n48\nTexas\n2.0\n2.0\nTotal Airports\nairports-2020-48429\n32.735872\n-98.836184\nPOINT (-98.836184 32.735872)\n2020\n\n\n3\nCounty\nAirports\nOther airports\nKnox County, Maine\n01/01/2020 12:00:00 AM\n23013\n23\nMaine\n7.0\n9.0\nTotal Airports\nother-airports-2020-23013\n44.155975\n-69.234045\nPOINT (-69.234045 44.155975)\n2020\n\n\n4\nCounty\nAirports\nPrimary Airports\nColfax County, New Mexico\n01/01/2020 12:00:00 AM\n35007\n35\nNew Mexico\n0.0\n5.0\nTotal Airports\nprimary-airports-2020-35007\n36.606139\n-104.646840\nPOINT (-104.64684 36.606139)\n2020\nfiltered_df = df[(df['Category'] == 'Person trips') & (df['Variable'] == 'Total trips')]\nprint(filtered_df)\n\n         Level      Category     Variable                        County  \\\n338538  County  Person trips  Total trips        Adair County, Kentucky   \n338541  County  Person trips  Total trips        Cass County, Minnesota   \n338543  County  Person trips  Total trips        Dundy County, Nebraska   \n338545  County  Person trips  Total trips          Menard County, Texas   \n338547  County  Person trips  Total trips        Malheur County, Oregon   \n...        ...           ...          ...                           ...   \n407541  County  Person trips  Total trips  Judith Basin County, Montana   \n407576  County  Person trips  Total trips       Massac County, Illinois   \n407577  County  Person trips  Total trips     Orange County, California   \n407589  County  Person trips  Total trips    Butte County, South Dakota   \n407596  County  Person trips  Total trips         Caribou County, Idaho   \n\n                          Date  GEOID  State FIPS         State         Value  \\\n338538  01/01/2019 12:00:00 AM  21001          21      Kentucky  2.690490e+07   \n338541  01/01/2020 12:00:00 AM  27021          27     Minnesota  3.458602e+07   \n338543  01/01/2019 12:00:00 AM  31057          31      Nebraska  2.444445e+06   \n338545  01/01/2020 12:00:00 AM  48327          48         Texas  2.741053e+06   \n338547  01/01/2019 12:00:00 AM  41045          41        Oregon  6.099970e+07   \n...                        ...    ...         ...           ...           ...   \n407541  01/01/2019 12:00:00 AM  30045          30       Montana  2.284353e+06   \n407576  01/01/2020 12:00:00 AM  17127          17      Illinois  2.246585e+07   \n407577  01/01/2020 12:00:00 AM   6059           6    California  3.002547e+09   \n407589  01/01/2019 12:00:00 AM  46019          46  South Dakota  1.430882e+07   \n407596  01/01/2020 12:00:00 AM  16029          16         Idaho  6.149330e+06   \n\n         Denominator Denominator Description            Row-ID   Latitude  \\\n338538  2.690490e+07            Person trips  trips-2019-21001  37.104170   \n338541  3.458602e+07            Person trips  trips-2020-27021  47.117876   \n338543  2.444445e+06            Person trips  trips-2019-31057  40.176201   \n338545  2.741053e+06            Person trips  trips-2020-48327  30.889818   \n338547  6.099970e+07            Person trips  trips-2019-41045  43.193414   \n...              ...                     ...               ...        ...   \n407541  2.284353e+06            Person trips  trips-2019-30045  47.045432   \n407576  2.246585e+07            Person trips  trips-2020-17127  37.218970   \n407577  3.002547e+09            Person trips  trips-2020-06059  33.702972   \n407589  1.430882e+07            Person trips  trips-2019-46019  44.905772   \n407596  6.149330e+06            Person trips  trips-2020-16029  42.770497   \n\n         Longitude                       Location  Year  \n338538  -85.280620     POINT (-85.28062 37.10417)  2019  \n338541  -94.280528   POINT (-94.280528 47.117876)  2020  \n338543 -101.687947  POINT (-101.687947 40.176201)  2019  \n338545  -99.820600     POINT (-99.8206 30.889818)  2020  \n338547 -117.623150   POINT (-117.62315 43.193414)  2019  \n...            ...                            ...   ...  \n407541 -110.266027  POINT (-110.266027 47.045432)  2019  \n407576  -88.707722    POINT (-88.707722 37.21897)  2020  \n407577 -117.761070   POINT (-117.76107 33.702972)  2020  \n407589 -103.507928  POINT (-103.507928 44.905772)  2019  \n407596 -111.562260   POINT (-111.56226 42.770497)  2020  \n\n[6279 rows x 16 columns]\naggregated_df = df.groupby('State')['Value'].sum().reset_index()\ndef abbreviate_states(states):\n    state_dict = {\n        'Alabama': 'AL', 'Alaska': 'AK', 'American Samoa': 'AS', 'Arizona': 'AZ', 'Arkansas': 'AR',\n        'California': 'CA', 'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE', 'Florida': 'FL',\n        'Georgia': 'GA', 'Guam': 'GU', 'Hawaii': 'HI', 'Idaho': 'ID', 'Illinois': 'IL',\n        'Indiana': 'IN', 'Iowa': 'IA', 'Kansas': 'KS', 'Kentucky': 'KY', 'Louisiana': 'LA',\n        'Maine': 'ME', 'Maryland': 'MD', 'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN',\n        'Mississippi': 'MS', 'Missouri': 'MO', 'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV',\n        'New Hampshire': 'NH', 'New Jersey': 'NJ', 'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC',\n        'North Dakota': 'ND', 'Northern Mariana Islands': 'MP', 'Ohio': 'OH', 'Oklahoma': 'OK', 'Oregon': 'OR',\n        'Pennsylvania': 'PA', 'Puerto Rico': 'PR', 'Rhode Island': 'RI', 'South Carolina': 'SC', 'South Dakota': 'SD',\n        'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT', 'Vermont': 'VT', 'Virgin Islands': 'VI',\n        'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY',\n        'District of Columbia': 'DC'\n    }\n    abbreviated_states = [state_dict[state] if state in state_dict else state for state in states]\n\n    return abbreviated_states\n\naggregated_df['State'] = abbreviate_states(aggregated_df['State'])\n\nfig = px.choropleth(\n    aggregated_df,\n    locations='State',\n    color_continuous_scale=\"Viridis\",\n    locationmode='USA-states',\n    color='Value',\n    scope='usa',\n    title='Choropleth Map based on State Values of Travel Frequency'\n)\n\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\nfiltered_df = filtered_df[filtered_df['State'].isin([\"California\", \"Texas\", \"New York\", \"Florida\", \"Illinois\"])]\nvalues=filtered_df['Value']\nendpts = list(np.mgrid[min(values):max(values):50j])\nfig = ff.create_choropleth(fips=filtered_df['GEOID'], values=values, legend_title='Travel Frequency by County in the top 5 States with most Aggregated Trips')\nfig.layout.template = None\nfig.update_layout(\n    legend_x = 0,\n    annotations = {'x': -0.5, 'xanchor': 'left'}\n)\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\ntop_100_values_df = filtered_df.nlargest(100, 'Value')\ndf_with_top100_travel = df[df['GEOID'].isin(top_100_values_df['GEOID'])]\ndf_with_top100_travel = df_with_top100_travel[df_with_top100_travel['Category'].isin(['Business', 'Commuting'])]\ndf_with_top100_travel = df_with_top100_travel[(df_with_top100_travel['Variable'] == 'Establishments') | (df_with_top100_travel['Variable'] == \"Commute by car/ truck/van\")]\npivoted_df = df_with_top100_travel.pivot_table(index='County', columns='Variable', values='Value', aggfunc='first')\npivoted_df.plot(kind='bar', figsize=(10, 6))\n\nplt.xlabel('County name')\nplt.ylabel('Value')\nplt.title('Comparison of Commuting (Personal vehicle) vs. Business (Establishments) for the Counties with top 100 most Travel')\nplt.show()\ntop_100_values_df = filtered_df.nlargest(100, 'Value')\ndf_with_top100_travel = df[df['GEOID'].isin(top_100_values_df['GEOID'])]\ndf_with_top100_travel = df_with_top100_travel[df_with_top100_travel['Category'].isin(['Bridges', 'Commuting'])]\ndf_with_top100_travel = df_with_top100_travel[(df_with_top100_travel['Variable'] == \"Bridge area, good (square meters)\") | (df_with_top100_travel['Variable'] == \"Commute by car/ truck/van\")]"
  },
  {
    "objectID": "viz_Zenan/viz.html#viz-6",
    "href": "viz_Zenan/viz.html#viz-6",
    "title": "Viz 5",
    "section": "Viz 6",
    "text": "Viz 6\n\npivoted_df = df_with_top100_travel.pivot_table(index='County', columns='Variable', values='Value', aggfunc='first')\npivoted_df.plot(kind='bar', figsize=(10, 6))\n\nplt.xlabel('County name')\nplt.ylabel('Value')\nplt.title('Comparison of Commuting (Personal vehicle) vs. Bridges(Bridge area, good (square meters)) for the Counties with top 100 most Travel')\nplt.show()\n\n\n\n\n\nincome_vs_commute = df[(df['Category'] == \"Demographics\") | (df['Category'] == \"Commuting\")]\nincome_vs_commute = income_vs_commute[income_vs_commute['Variable'].isin([\"Median Household Income\", \"Commute by car/ truck/van\"])]\nincome_vs_commute = income_vs_commute[income_vs_commute['GEOID'].isin(top_100_values_df['GEOID'])]"
  },
  {
    "objectID": "viz_Zenan/viz.html#viz-7",
    "href": "viz_Zenan/viz.html#viz-7",
    "title": "Viz 5",
    "section": "Viz 7",
    "text": "Viz 7\n\npivoted_df = income_vs_commute.pivot_table(index='County', columns='Variable', values='Value', aggfunc='first')\npivoted_df.plot(kind='bar', figsize=(10, 6))\n\nplt.xlabel('County name')\nplt.ylabel('Value')\nplt.title('Comparison of Commuting (Personal vehicle) vs. Median Household Income for the Counties with top 100 most Travel')\nplt.show()\n\n\n\n\n\ntop_50_values_df = filtered_df.nlargest(50, 'Value')\npopulation_vs_commute = df[(df['Category'] == \"Demographics\") | (df['Category'] == \"Commuting\")]\npopulation_vs_commute = population_vs_commute[population_vs_commute['Variable'].isin([\"Workers\", \"Commute by car/ truck/van\", \"Commute by public transportation\", \"Work at home\",\"Population\" ])]\npopulation_vs_commute = population_vs_commute[population_vs_commute['GEOID'].isin(top_50_values_df['GEOID'])]"
  },
  {
    "objectID": "viz_Zenan/viz.html#viz-8",
    "href": "viz_Zenan/viz.html#viz-8",
    "title": "Viz 5",
    "section": "Viz 8",
    "text": "Viz 8\n\npivoted_df = population_vs_commute.pivot_table(index='County', columns='Variable', values='Value', aggfunc='first')\nax = pivoted_df.plot(kind='area', figsize=(12, 6), stacked=True)\ncurrent_ticks = ax.get_xticks()\ncurrent_labels = [item.get_text() for item in ax.get_xticklabels()]\nax.set_xticks(range(len(pivoted_df.index)))  \nax.set_xticklabels(pivoted_df.index, rotation='vertical', fontsize=8) \n\nplt.xlabel('County name')\nplt.ylabel('Value')\nplt.title('Comparison of 3 Commuting methods vs Population by Counties')\nplt.tight_layout()  \nplt.show()"
  },
  {
    "objectID": "viz_Zenan/viz.html#viz-9",
    "href": "viz_Zenan/viz.html#viz-9",
    "title": "Viz 5",
    "section": "Viz 9",
    "text": "Viz 9\n\nbridge = df[df['Category'] == 'Bridges']\npivoted_df = bridge.pivot_table(index='State', columns='Variable', values='Value', aggfunc='mean')\n\nax = pivoted_df.plot(kind='barh', figsize=(10, 10))\nplt.xlabel('Value')\nplt.ylabel('State')\nplt.title('Comparison of Bridge Types by State')\nplt.xticks(rotation=75)\nplt.legend(title='Bridge Type')\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "RICH/eda.html",
    "href": "RICH/eda.html",
    "title": "Initial EDA",
    "section": "",
    "text": "In this section, we will explore a few different aspects of our dataset. We will examine the different categories and values that exist within the data, as well as the distributions for various sub-categorizations. This analysis will help contextualize which attributes of the data are most useful for addressing our areas of interest."
  },
  {
    "objectID": "RICH/eda.html#import",
    "href": "RICH/eda.html#import",
    "title": "Initial EDA",
    "section": "Import",
    "text": "Import\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport json\n\nfrom tabulate import tabulate\n\n\n\n\nCode\nwith open(\"../data/data.csv\", \"r\") as f:\n    df = pd.read_csv(f)\ndf.head()\n\n\n\n\n\n\n\n\n\nLevel\nCategory\nVariable\nCounty\nDate\nGEOID\nState FIPS\nState\nValue\nDenominator\nDenominator Description\nRow-ID\nLatitude\nLongitude\nLocation\nYear\n\n\n\n\n0\nCounty\nAirports\nTotal Airports\nGrant County, Wisconsin\n01/01/2020 12:00:00 AM\n55043\n55\nWisconsin\n9.0\n9.0\nTotal Airports\nairports-2020-55043\n42.867479\n-90.706205\nPOINT (-90.706205 42.867479)\n2020\n\n\n1\nCounty\nAirports\nTotal Airports\nTaylor County, Florida\n01/01/2020 12:00:00 AM\n12123\n12\nFlorida\n7.0\n7.0\nTotal Airports\nairports-2020-12123\n30.047015\n-83.603520\nPOINT (-83.60352 30.047015)\n2020\n\n\n2\nCounty\nAirports\nTotal Airports\nStephens County, Texas\n01/01/2020 12:00:00 AM\n48429\n48\nTexas\n2.0\n2.0\nTotal Airports\nairports-2020-48429\n32.735872\n-98.836184\nPOINT (-98.836184 32.735872)\n2020\n\n\n3\nCounty\nAirports\nOther airports\nKnox County, Maine\n01/01/2020 12:00:00 AM\n23013\n23\nMaine\n7.0\n9.0\nTotal Airports\nother-airports-2020-23013\n44.155975\n-69.234045\nPOINT (-69.234045 44.155975)\n2020\n\n\n4\nCounty\nAirports\nPrimary Airports\nColfax County, New Mexico\n01/01/2020 12:00:00 AM\n35007\n35\nNew Mexico\n0.0\n5.0\nTotal Airports\nprimary-airports-2020-35007\n36.606139\n-104.646840\nPOINT (-104.64684 36.606139)\n2020"
  },
  {
    "objectID": "RICH/eda.html#groupings",
    "href": "RICH/eda.html#groupings",
    "title": "Initial EDA",
    "section": "Groupings",
    "text": "Groupings\n\n“Category”\n\n\n\nCode\ncats = list(df[\"Category\"].unique())\nprint(tabulate())\n\n\n['Airports', 'Bridges', 'Business', 'Commuting', 'Demographics', 'Maritime', 'Person trips', 'Railroad']\n\n\n\n\nCode\ncatVars = {}\nfor cat in cats:\n    if cat not in catVars:\n        catVars[cat] = []\n    \n    for var in df[df[\"Category\"] == cat][\"Variable\"].unique():\n        catVars[cat].append(var)\n\ncatVarDf = []\nfor i in range(max(len(catVars[k]) for k in catVars)):\n    catVarDf.append([])\n    for k in catVars:\n        try:\n            catVarDf[-1].append(catVars[k][i])\n        except Exception as e:\n            catVarDf[-1].append(\" \")\ntable = tabulate(catVarDf, headers=list(catVars.keys()))\nprint(table)\n\n\nAirports                      Bridges                            Business        Commuting                         Demographics              Maritime    Person trips                              Railroad\n----------------------------  ---------------------------------  --------------  --------------------------------  ------------------------  ----------  ----------------------------------------  --------------------\nTotal Airports                Bridges, poor                      Establishments  Workers                           Population                Marinas     Trips 1-3 miles                           Rail freight miles\nOther airports                Bridges, fair                      Employees       Commute by car/ truck/van         Hispanic                  Docks       Trips less than 1 mile                    Rail passenger miles\nPrimary Airports              Total bridges                                      Work at home                      Median Household Income               Total trips\nCommercial-service Airports   Bridges, good                                      Work in-state                     Non Hispanic White Alone              Trips 10-25 miles\nCivil use and seaplane bases  Bridge area (square meters)                        Work out-of-state                                                       Trips 25-50 miles\n                              Bridge area, poor (square meters)                  Commute by public transportation                                        Trips 100-250 miles\n                              Bridge area, fair (square meters)                  Workers wo/ a vehicle                                                   Trips 3-5 miles\n                              Bridge area, good (square meters)                                                                                          Trips 5-10 miles\n                                                                                                                                                         Trips 250-500 miles\n                                                                                                                                                         Trips 50-100 miles\n                                                                                                                                                         Trips greater than or equal to 500 miles\n\n\n\n\nCode\nlen(df[\"Variable\"].unique())\n\n\n41"
  },
  {
    "objectID": "RICH/eda.html#about-the-data",
    "href": "RICH/eda.html#about-the-data",
    "title": "Initial EDA",
    "section": "About the Data",
    "text": "About the Data"
  }
]